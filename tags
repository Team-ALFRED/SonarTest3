!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DEFAULT_BG_B	/home/rachel/SonarTest3/src/turtle_frame.cpp	40;"	d	file:
DEFAULT_BG_G	/home/rachel/SonarTest3/src/turtle_frame.cpp	39;"	d	file:
DEFAULT_BG_R	/home/rachel/SonarTest3/src/turtle_frame.cpp	38;"	d	file:
DEFAULT_PEN_B	/home/rachel/SonarTest3/src/turtle.cpp	37;"	d	file:
DEFAULT_PEN_G	/home/rachel/SonarTest3/src/turtle.cpp	36;"	d	file:
DEFAULT_PEN_R	/home/rachel/SonarTest3/src/turtle.cpp	35;"	d	file:
M_Turtle	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  typedef std::map<std::string, TurtlePtr> M_Turtle;$/;"	t	class:turtlesim::TurtleFrame
PI	/home/rachel/SonarTest3/include/turtlesim/turtle.h	51;"	d
TURTLESIM_TURTLE_H	/home/rachel/SonarTest3/include/turtlesim/turtle.h	31;"	d
TeleportRequest	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^    TeleportRequest(float x, float y, qreal _theta, qreal _linear, bool _relative)$/;"	f	struct:turtlesim::Turtle::TeleportRequest
TeleportRequest	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  struct TeleportRequest$/;"	s	class:turtlesim::Turtle
Turtle	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^class Turtle$/;"	c	namespace:turtlesim
Turtle	/home/rachel/SonarTest3/src/turtle.cpp	/^Turtle::Turtle(const ros::NodeHandle& nh, const QImage& turtle_image, const QPointF& pos, float orient)$/;"	f	class:turtlesim::Turtle
TurtleApp	/home/rachel/SonarTest3/src/turtlesim.cpp	/^  TurtleApp(int& argc, char** argv)$/;"	f	class:TurtleApp
TurtleApp	/home/rachel/SonarTest3/src/turtlesim.cpp	/^class TurtleApp : public QApplication$/;"	c	file:
TurtleFrame	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^class TurtleFrame : public QFrame$/;"	c	namespace:turtlesim
TurtleFrame	/home/rachel/SonarTest3/src/turtle_frame.cpp	/^TurtleFrame::TurtleFrame(QWidget* parent, Qt::WindowFlags f)$/;"	f	class:turtlesim::TurtleFrame
TurtlePtr	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^typedef boost::shared_ptr<Turtle> TurtlePtr;$/;"	t	namespace:turtlesim
V_TeleportRequest	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  typedef std::vector<TeleportRequest> V_TeleportRequest;$/;"	t	class:turtlesim::Turtle
a_scale	/home/rachel/SonarTest3/tutorials/teleop_turtle_key.cpp	/^double a_scale = 2.0;$/;"	v
ang_vel_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  qreal ang_vel_;$/;"	m	class:turtlesim::Turtle
angular	/home/rachel/SonarTest3/tutorials/teleop_turtle_key.cpp	/^double angular = 0;$/;"	v
chatterCallback	/home/rachel/SonarTest3/tutorials/teleop_turtle_key.cpp	/^void chatterCallback(const std_msgs::Int64::ConstPtr& msg)$/;"	f
clear	/home/rachel/SonarTest3/src/turtle_frame.cpp	/^void TurtleFrame::clear()$/;"	f	class:turtlesim::TurtleFrame
clearCallback	/home/rachel/SonarTest3/src/turtle_frame.cpp	/^bool TurtleFrame::clearCallback(std_srvs::Empty::Request&, std_srvs::Empty::Response&)$/;"	f	class:turtlesim::TurtleFrame
clear_srv_	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  ros::ServiceServer clear_srv_;$/;"	m	class:turtlesim::TurtleFrame
color_pub_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  ros::Publisher color_pub_;$/;"	m	class:turtlesim::Turtle
cooked	/home/rachel/SonarTest3/tutorials/teleop_turtle_key.cpp	/^struct termios cooked, raw;$/;"	v	typeref:struct:termios
exec	/home/rachel/SonarTest3/src/turtlesim.cpp	/^  int exec()$/;"	f	class:TurtleApp
frame_count_	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  uint64_t frame_count_;$/;"	m	class:turtlesim::TurtleFrame
hasTurtle	/home/rachel/SonarTest3/src/turtle_frame.cpp	/^bool TurtleFrame::hasTurtle(const std::string& name)$/;"	f	class:turtlesim::TurtleFrame
height_in_meters_	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  float height_in_meters_;$/;"	m	class:turtlesim::TurtleFrame
id_counter_	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  uint32_t id_counter_;$/;"	m	class:turtlesim::TurtleFrame
kfd	/home/rachel/SonarTest3/tutorials/teleop_turtle_key.cpp	/^int kfd = 0;$/;"	v
killCallback	/home/rachel/SonarTest3/src/turtle_frame.cpp	/^bool TurtleFrame::killCallback(turtlesim::Kill::Request& req, turtlesim::Kill::Response&)$/;"	f	class:turtlesim::TurtleFrame
kill_srv_	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  ros::ServiceServer kill_srv_;$/;"	m	class:turtlesim::TurtleFrame
l_scale	/home/rachel/SonarTest3/tutorials/teleop_turtle_key.cpp	/^double l_scale = 2.0; $/;"	v
last_command_time_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  ros::WallTime last_command_time_;$/;"	m	class:turtlesim::Turtle
last_turtle_update_	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  ros::WallTime last_turtle_update_;$/;"	m	class:turtlesim::TurtleFrame
lin_vel_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  qreal lin_vel_;$/;"	m	class:turtlesim::Turtle
linear	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^    qreal linear;$/;"	m	struct:turtlesim::Turtle::TeleportRequest
linear	/home/rachel/SonarTest3/tutorials/teleop_turtle_key.cpp	/^double linear = 0;$/;"	v
main	/home/rachel/SonarTest3/src/turtlesim.cpp	/^int main(int argc, char** argv)$/;"	f
main	/home/rachel/SonarTest3/tutorials/teleop_turtle_key.cpp	/^int main(int argc, char** argv)$/;"	f
meter_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  float meter_;$/;"	m	class:turtlesim::Turtle
meter_	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  float meter_;$/;"	m	class:turtlesim::TurtleFrame
mySigintHandler	/home/rachel/SonarTest3/tutorials/teleop_turtle_key.cpp	/^void mySigintHandler(int sig)$/;"	f
nh_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  ros::NodeHandle nh_;$/;"	m	class:turtlesim::Turtle
nh_	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  ros::NodeHandle nh_;$/;"	m	class:turtlesim::TurtleFrame
nh_	/home/rachel/SonarTest3/src/turtlesim.cpp	/^  ros::NodeHandlePtr nh_;$/;"	m	class:TurtleApp	file:
onUpdate	/home/rachel/SonarTest3/src/turtle_frame.cpp	/^void TurtleFrame::onUpdate()$/;"	f	class:turtlesim::TurtleFrame
orient_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  qreal orient_;$/;"	m	class:turtlesim::Turtle
paint	/home/rachel/SonarTest3/src/turtle.cpp	/^void Turtle::paint(QPainter& painter)$/;"	f	class:turtlesim::Turtle
paintEvent	/home/rachel/SonarTest3/src/turtle_frame.cpp	/^void TurtleFrame::paintEvent(QPaintEvent* event)$/;"	f	class:turtlesim::TurtleFrame
path_image_	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  QImage path_image_;$/;"	m	class:turtlesim::TurtleFrame
path_painter_	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  QPainter path_painter_;$/;"	m	class:turtlesim::TurtleFrame
pen_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  QPen pen_;$/;"	m	class:turtlesim::Turtle
pen_on_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  bool pen_on_;$/;"	m	class:turtlesim::Turtle
pos	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^    QPointF pos;$/;"	m	struct:turtlesim::Turtle::TeleportRequest
pos_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  QPointF pos_;$/;"	m	class:turtlesim::Turtle
pose_pub_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  ros::Publisher pose_pub_;$/;"	m	class:turtlesim::Turtle
quit	/home/rachel/SonarTest3/tutorials/teleop_turtle_key.cpp	/^void quit(int sig)$/;"	f
raw	/home/rachel/SonarTest3/tutorials/teleop_turtle_key.cpp	/^struct termios cooked, raw;$/;"	v	typeref:struct:
relative	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^    bool relative;$/;"	m	struct:turtlesim::Turtle::TeleportRequest
resetCallback	/home/rachel/SonarTest3/src/turtle_frame.cpp	/^bool TurtleFrame::resetCallback(std_srvs::Empty::Request&, std_srvs::Empty::Response&)$/;"	f	class:turtlesim::TurtleFrame
reset_srv_	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  ros::ServiceServer reset_srv_;$/;"	m	class:turtlesim::TurtleFrame
rotateImage	/home/rachel/SonarTest3/src/turtle.cpp	/^void Turtle::rotateImage()$/;"	f	class:turtlesim::Turtle
setPenCallback	/home/rachel/SonarTest3/src/turtle.cpp	/^bool Turtle::setPenCallback(turtlesim::SetPen::Request& req, turtlesim::SetPen::Response&)$/;"	f	class:turtlesim::Turtle
set_pen_srv_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  ros::ServiceServer set_pen_srv_;$/;"	m	class:turtlesim::Turtle
spawnCallback	/home/rachel/SonarTest3/src/turtle_frame.cpp	/^bool TurtleFrame::spawnCallback(turtlesim::Spawn::Request& req, turtlesim::Spawn::Response& res)$/;"	f	class:turtlesim::TurtleFrame
spawnTurtle	/home/rachel/SonarTest3/src/turtle_frame.cpp	/^std::string TurtleFrame::spawnTurtle(const std::string& name, float x, float y, float angle)$/;"	f	class:turtlesim::TurtleFrame
spawnTurtle	/home/rachel/SonarTest3/src/turtle_frame.cpp	/^std::string TurtleFrame::spawnTurtle(const std::string& name, float x, float y, float angle, size_t index)$/;"	f	class:turtlesim::TurtleFrame
spawn_srv_	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  ros::ServiceServer spawn_srv_;$/;"	m	class:turtlesim::TurtleFrame
teleportAbsoluteCallback	/home/rachel/SonarTest3/src/turtle.cpp	/^bool Turtle::teleportAbsoluteCallback(turtlesim::TeleportAbsolute::Request& req, turtlesim::TeleportAbsolute::Response&)$/;"	f	class:turtlesim::Turtle
teleportRelativeCallback	/home/rachel/SonarTest3/src/turtle.cpp	/^bool Turtle::teleportRelativeCallback(turtlesim::TeleportRelative::Request& req, turtlesim::TeleportRelative::Response&)$/;"	f	class:turtlesim::Turtle
teleport_absolute_srv_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  ros::ServiceServer teleport_absolute_srv_;$/;"	m	class:turtlesim::Turtle
teleport_relative_srv_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  ros::ServiceServer teleport_relative_srv_;$/;"	m	class:turtlesim::Turtle
teleport_requests_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  V_TeleportRequest teleport_requests_;$/;"	m	class:turtlesim::Turtle
theta	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^    qreal theta;$/;"	m	struct:turtlesim::Turtle::TeleportRequest
turtle_image_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  QImage turtle_image_;$/;"	m	class:turtlesim::Turtle
turtle_images_	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  QVector<QImage> turtle_images_;$/;"	m	class:turtlesim::TurtleFrame
turtle_rotated_image_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  QImage turtle_rotated_image_;$/;"	m	class:turtlesim::Turtle
turtles_	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  M_Turtle turtles_;$/;"	m	class:turtlesim::TurtleFrame
turtlesim	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^namespace turtlesim$/;"	n
turtlesim	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^namespace turtlesim$/;"	n
turtlesim	/home/rachel/SonarTest3/src/turtle.cpp	/^namespace turtlesim$/;"	n	file:
turtlesim	/home/rachel/SonarTest3/src/turtle_frame.cpp	/^namespace turtlesim$/;"	n	file:
twist_pub_	/home/rachel/SonarTest3/tutorials/teleop_turtle_key.cpp	/^ros::Publisher twist_pub_;$/;"	v
update	/home/rachel/SonarTest3/src/turtle.cpp	/^bool Turtle::update(double dt, QPainter& path_painter, const QImage& path_image, qreal canvas_width, qreal canvas_height)$/;"	f	class:turtlesim::Turtle
updateTurtles	/home/rachel/SonarTest3/src/turtle_frame.cpp	/^void TurtleFrame::updateTurtles()$/;"	f	class:turtlesim::TurtleFrame
update_timer_	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  QTimer* update_timer_;$/;"	m	class:turtlesim::TurtleFrame
velocityCallback	/home/rachel/SonarTest3/src/turtle.cpp	/^void Turtle::velocityCallback(const geometry_msgs::Twist::ConstPtr& vel)$/;"	f	class:turtlesim::Turtle
velocity_sub_	/home/rachel/SonarTest3/include/turtlesim/turtle.h	/^  ros::Subscriber velocity_sub_;$/;"	m	class:turtlesim::Turtle
width_in_meters_	/home/rachel/SonarTest3/include/turtlesim/turtle_frame.h	/^  float width_in_meters_;$/;"	m	class:turtlesim::TurtleFrame
~TurtleFrame	/home/rachel/SonarTest3/src/turtle_frame.cpp	/^TurtleFrame::~TurtleFrame()$/;"	f	class:turtlesim::TurtleFrame
